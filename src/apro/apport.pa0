type
  {Port characteristic constants}
  {$IFNDEF LargeComNameSet}
  ComNameType = (Com1, Com2, Com3, Com4, Com5, Com6, Com7, Com8);
  {$ELSE}
  ComNameType = (Com1,  Com2,  Com3,  Com4,  Com5,  Com6,  Com7,  Com8,
                 Com9,  Com10, Com11, Com12, Com13, Com14, Com15, Com16,
                 Com17, Com18, Com19, Com20, Com21, Com22, Com23, Com24,
                 Com25, Com26, Com27, Com28, Com29, Com30, Com31, Com32,
                 Com33, Com34, Com35, Com36, Com37, Com38, Com39, Com40,
                 Com41, Com42, Com43, Com44, Com45, Com46, Com47, Com48,
                 Com49, Com50, Com51, Com52, Com53, Com54, Com55, Com56,
                 Com57, Com58, Com59, Com60, Com61, Com62, Com63, Com64,
                 Com65, Com66, Com67, Com68, Com69, Com70, Com71, Com72,
                 Com73, Com74, Com75, Com76, Com77, Com78, Com79, Com80,
                 Com81, Com82, Com83, Com84, Com85, Com86, Com87, Com88,
                 Com89, Com90, Com91, Com92, Com93, Com94, Com95, Com96,
                 Com97, Com98, Com99, Com100, Com101, Com102, Com103, Com104,
                 Com105, Com106, Com107, Com108, Com109, Com110, Com111, Com112,
                 Com113, Com114, Com115, Com116, Com117, Com118, Com119, Com120,
                 Com121, Com122, Com123, Com124, Com125, Com126, Com127, Com128,
                 Com129, Com130, Com131, Com132, Com133, Com134, Com135, Com136,
                 Com137, Com138, Com139, Com140, Com141, Com142, Com143, Com144,
                 Com145, Com146, Com147, Com148, Com149, Com150, Com151, Com152,
                 Com153, Com154, Com155, Com156, Com157, Com158, Com159, Com160,
                 Com161, Com162, Com163, Com164, Com165, Com166, Com167, Com168,
                 Com169, Com170, Com171, Com172, Com173, Com174, Com175, Com176,
                 Com177, Com178, Com179, Com180, Com181, Com182, Com183, Com184,
                 Com185, Com186, Com187, Com188, Com189, Com190, Com191, Com192,
                 Com193, Com194, Com195, Com196, Com197, Com198, Com199, Com200,
                 Com201, Com202, Com203, Com204, Com205, Com206, Com207, Com208,
                 Com209, Com210, Com211, Com212, Com213, Com214, Com215, Com216,
                 Com217, Com218, Com219, Com220, Com221, Com222, Com223, Com224,
                 Com225, Com226, Com227, Com228, Com229, Com230, Com231, Com232,
                 Com233, Com234, Com235, Com236, Com237, Com238, Com239, Com240,
                 Com241, Com242, Com243, Com244, Com245, Com246, Com247, Com248,
                 Com249, Com250, Com251, Com252, Com253, Com254);
  {$ENDIF}

  ParityType = (NoParity, OddParity, EvenParity, MarkParity, SpaceParity);
  DataBitType = 5..8;
  StopBitType = 1..2;
  BPtr = ^Byte;
  {$IFDEF MSDOS}
    CharArray = array[0..MaxInt] of Char;
  {$ELSE}
    CharArray = array[0..32767] of char;
  {$ENDIF}

  {Port record pointer type}
  PortRecPtr = ^PortRec;

  {For saving the state of a ComPort}
  PortSaveRec = record
    PicMask : Byte;
    IER     : Byte;
    MCR     : Byte;
    LCR     : Byte;
    BRLR    : Byte;
    BRHR    : Byte;
    FIFO    : Byte;
    Trigger : Byte;
    Vector  : Pointer;
  end;

  {For PS/2 detection}
  PS2Mode = (PS2On, PS2Off, PS2Auto, PS2Ignore);

  {Possible flow states}
  FlowState = (fsOff, fsClear, fsTransWait, fsRecWait, fsAllWait);

  {Procedure types for "core" procedures}
  InitPortProc = procedure(var P : PortRecPtr; ComName : ComNameType;
                           Baud : LongInt; Parity : ParityType;
                           DataBits : DataBitType; StopBit : StopBitType;
                           InSize, OutSize : Word;
                           Options : Word);
  InitPortKeepProc = procedure(var P : PortRecPtr; ComName : ComNameType;
                               InSize, OutSize : Word);
  DonePortProc = procedure(var P : PortRecPtr);
  SetUartProc = procedure(ComName : ComNameType; NewBase : Word;
                          NewIrq, NewVector : Byte);
  SetLineProc = procedure(P : PortRecPtr; Baud : LongInt; Parity : ParityType;
                          DataBits : DataBitType; StopBits : StopBitType);
  GetLineProc = procedure(P : PortRecPtr; var Baud : LongInt;
                          var Parity : ParityType;
                          var DataBits : DataBitType;
                          var StopBits : StopBitType;
                          FromHardware : Boolean);
  SetModemProc = procedure(P : PortRecPtr; SetDTR, SetRTS : Boolean);
  GetModemProc = procedure(P : PortRecPtr; var DTR, RTS : Boolean);
  GetCharProc = procedure(P : PortRecPtr; var C : Char);
  PeekCharProc = procedure(P : PortRecPtr; var C : Char; PeekAhead : Word);
  PutCharProc = procedure(P : PortRecPtr; C : Char);
  StartTransmitterProc = procedure(P : PortRecPtr);
  CharReadyFunc = function(P : PortRecPtr) : Boolean;
  TransReadyFunc = function(P : PortRecPtr) : Boolean;
  SendBreakProc = procedure(P : PortRecPtr);
  ActivatePortProc = procedure(P : PortRecPtr; Restore : Boolean);
  SavePortProc = procedure(P : PortRecPtr; var PSR);
  GotErrorProc = procedure(P : PortRecPtr; StatusCode : Word);

  {Core types added for alternate device layers}
  UpdateLineStatusFunc = function(P : PortRecPtr) : Byte;
  UpdateModemStatusFunc = function(P : PortRecPtr) : Byte;
  FlowSetProc = procedure(P : PortRecPtr; Enable : Boolean;
                          BufferFull, BufferResume : Word;
                          Options : Word);
  FlowGetFunc = function(P : PortRecPtr) : FlowState;
  FlowCtlProc = procedure(P : PortRecPtr; OnChar, OffChar : Char;
                          Resume : Boolean);
  BufferStatusProc = procedure(P : PortRecPtr;
                               var InFree, OutFree, InUsed, OutUsed : Word);
  BufferFlushProc = procedure(P : PortRecPtr; FlushIn, FlushOut: Boolean);

  {Procedure type for error handler}
  AsyncErrorProc = procedure(P : Pointer; var StatusCode : Word);

  {Procedure type for all user aborts}
  AbortFunc = function : Boolean;

  PortRec = record
    BaseAddr      : Word;             {Base IO addr of UART}
    Flags         : Word;             {Option flags for port options}
    InBuffLen     : Word;             {Length of input buffer}
    InBuffCount   : Word;             {Current # of chars in buffer}
    OutBuffLen    : Word;             {Length of output buffer}
    OutBuffCount  : Word;             {Current # of chars in buffer}
    LostCharCount : Word;             {Number of lost characters}
    SWFFull       : Word;             {Hi-water mark for xoff}
    SWFResume     : Word;             {Lo-water mark for xon}
    HWFFull       : Word;             {Hi-water mark for auto-handshaking off}
    HWFResume     : Word;             {Lo-water mark for auto-handshaking on}
    CurBaud       : LongInt;          {Baud rate}
    InBuff        : BPtr;             {Addr of input buffer}
    InHead        : BPtr;             {Addr of current head}
    InTail        : BPtr;             {Addr of current tail}
    InBuffEnd     : BPtr;             {Addr of end of buffer}
    OutBuff       : BPtr;             {Addr of output buffer}
    OutHead       : BPtr;             {Addr of current head}
    OutTail       : BPtr;             {Addr of current tail}
    OutBuffEnd    : BPtr;             {Addr of end-of-buffer}
    StatBuff      : BPtr;             {Addr of status buffer}
    StatHead      : BPtr;             {Addr of current status head}
    StatTail      : BPtr;             {Addr of current status tail}
    StatBuffEnd   : BPtr;             {Addr of end of status buffer}
    PortName      : ComNameType;      {"Standard" name (COM1,COM2...)}
    Vector        : Byte;             {Vector number of UART interrupt}
    IrqNumber     : Byte;             {IRQ number for this port}
    IntMask       : Byte;             {Current UART interrupt enable}
    CurrentPort   : Byte;             {Current active port number}
    ISREntryPoint : Byte;             {Entry point number into APUART.ASM}
    ModemStatus   : Byte;             {Current modem status}
    ModemControl  : Byte;             {Current modem control value}
    LineStatus    : Byte;             {Current line status}
    LineControl   : Byte;             {Current line control value}
    SWFState      : Byte;             {Sofware flow control options}
    SWFGotXoff    : Boolean;          {True if Xoff char received}
    SWFSentXoff   : Boolean;          {True if Xoff char sent}
    SWFOnChar     : Char;             {SW flow on character (def = $11, Xon)}
    SWFOffChar    : Char;             {SW flow off character (def = $13, Xoff)}
    BreakReceived : Boolean;          {True in break received}
    TxReady       : Boolean;          {True if transmitter is available}
    TxInts        : Boolean;          {True if using transmit interrupts}
    TxIntsActive  : Boolean;          {True if transmit ints are active}
    Buffered      : Boolean;          {True if using buffer serial I/O}
    UseStatusBuffer : Boolean;        {True if using status buffer}
    OldUart       : Boolean;          {True if UART is 8250 or 8250B}
    CurParity     : ParityType;       {Parity}
    CurDataBits   : DataBitType;      {Data bits}
    CurStopBits   : StopBitType;      {Stop bits}
    SaveChar      : Char;             {Last known char (used internally only)}
    LastXmitError : Byte;             {Reason for last failed xmit}
    HWFTransMask  : Byte;             {Mask to XOR modem status bits to zero}
    HWFTransHonor : Byte;             {Mask of required modem status bits}
    HWFRecMask    : Byte;             {Mask of "on" modem status bits}
    HWFRecHonor   : Byte;             {Mask of modem status bits we care about}
    HWFRemoteOff  : Boolean;          {True if we have turned off the remote}
    ISRActive     : Boolean;          {True if in debugging mode}
    ProtocolActive : Boolean;         {True if this port is doing a protocol}
    FaxActive     : Boolean;          {True if this port is doing a fax}
    DoneProc      : DonePortProc;     {DonePort proc for this port}
    ErrorProc     : AsyncErrorProc;   {Pointer to error procedure}
    ErrorData     : Pointer;          {Pointer passed to error routine}
    UserAbort     : AbortFunc;        {Hook for user (keyboard) abort}
    OrigPortState : PortSaveRec;      {Record for saving init port config}
  end;

  {Line options record}
  LineOptionRecord = record
    Parity        : ParityType;
    DataBits      : DataBitType;
    StopBits      : StopBitType;
    Options       : Word;
    InSize        : Word;
    OutSize       : Word;
  end;

{$IFNDEF Standalone}
  {For sets of delimiter chars}
  CharSet = Set of Char;
{$ENDIF}

const
  {---- Option codes for ports ----}
  ptReturnPartialGets  = $0001;   {True to return partial strings}
  ptReturnDelimiter    = $0002;   {True to return delim char}
  ptExecutePartialPuts = $0004;   {True to send partial blocks}
  ptIgnoreDelimCase    = $0008;   {True to ignore case on DelimSets}
  ptRestoreOnClose     = $0010;   {True to restore UART on close}
  ptDropModemOnClose   = $0020;   {True to drop modem signals on close}
  ptRaiseModemOnOpen   = $0040;   {True to raise modem signals on open}
  ptBufferGetChar      = $1000;   {Set to use buffered reads}          {!!.03}

  {---- Internal option codes for ports ----}
  ptHiIrq              = $1000;   {True if IRQ > 7}

  {---- Default options ----}
  DefPortOptionsSimple = ptReturnPartialGets +
                         ptReturnDelimiter +
                         ptExecutePartialPuts +
                         ptDropModemOnClose +
                         ptRaiseModemOnOpen +
                         ptRestoreOnClose;
  DefPortOptions : Word = DefPortOptionsSimple;
  BadPortOptions : Word = ptHiIrq;

  MinInBuff = 10;            {Min allowable input buffer size}
  MinOutBuff = 10;           {Min allowable output buffer size}

  {Constants for supported device types}
  NoDevice = 0;
  UartDevice = 1;
  Int14Device = 2;
  FossilDevice = 3;
  Digi14Device = 4;

  {Convenient character constants (and aliases)}
  cNul = #0;
  cSoh = #1;
  cStx = #2;
  cEtx = #3;
  cEot = #4;
  cEnq = #5;
  cAck = #6;
  cBel = #7;
  cBS  = #8;
  cTab = #9;
  cLF  = #10;
  cVT  = #11;
  cFF  = #12;
  cCR  = #13;
  cSO  = #14;
  cSI  = #15;
  cDle = #16;
  cDC1 = #17;       cXon  = #17;
  cDC2 = #18;
  cDC3 = #19;       cXoff = #19;
  cDC4 = #20;
  cNak = #21;
  cSyn = #22;
  cEtb = #23;
  cCan = #24;
  cEM  = #25;
  cSub = #26;
  cEsc = #27;
  cFS  = #28;
  cGS  = #29;
  cRS  = #30;
  cUS  = #31;

  ParityString : array[ParityType] of String[5] = (
    'None', 'Odd', 'Even', 'Mark', 'Space');

  DefaultXonChar : Char = cXon;    {Standard Xon char (DC1)}
  DefaultXoffChar : Char = cXoff;  {Standard Xoff char (DC3)}

  PS2DetectMode : PS2Mode = PS2Auto;

  DefaultLineOptions : LineOptionRecord =
   (Parity : NoParity;
    DataBits : 8;
    StopBits : 1;
    Options : DefPortOptionsSimple;
    InSize : 2048;
    OutSize : 2048 + 30);

  {$IFDEF Tracing}
  TracingOn : Boolean = False;
  MaxTraceCol : Byte = 78;
  {$ENDIF}

  {Maximum number of simultaneous active (open) ports}
  MaxActivePort = 36;

  {8250 register designations}
  THreg  = 0;                        {Transmit hold}
  RDreg  = 0;                        {Read data}
  BRLreg = 0;                        {Baud rate least sig}
  BRHreg = 1;                        {Baud rate most sig}
  IEreg  = 1;                        {Int enable reg}
  IIDreg = 2;                        {Int ident reg}
  LCreg  = 3;                        {Line control}
  MCreg  = 4;                        {Modem control}
  LSreg  = 5;                        {Line status}
  MSreg  = 6;                        {Modem status}
  Sreg   = 7;                        {Scratch register}

  {Line control bit masks}
  WordLen0Mask     = $01;        {Word length select 0}
  WordLen1Mask     = $02;        {Word length select 1}
  StopBitsMask     = $04;        {Number of stop bits}
  ParityEnableMask = $08;        {Parity enable}
  EvenParityMask   = $10;        {Even parity select}
  StickParityMask  = $20;        {Stick parity select}
  SetBreakMask     = $40;        {Set break}
  DLABMask         = $80;        {Set divisor latch access}

  {Line status bit masks}
  DataReadyMask    = $01;        {Receive char is ready}
  OverrunErrorMask = $02;        {Overrun error received}
  ParityErrorMask  = $04;        {Parity error received}
  FramingErrorMask = $08;        {Framing error received}
  BreakReceivedMask= $10;        {Break received}
  THREMask         = $20;        {Transmitter holding register is empty}
  TEMask           = $40;        {Transmitter is empty}
  FIFOErrorMask    = $80;        {FIFO error received}

  {Modem control bit masks}
  DTRMask          = $01;        {Data terminal ready}
  RTSMask          = $02;        {Request to send}
  Out1Mask         = $04;        {Output bit 1}
  Out2Mask         = $08;        {Output bit 2}
  LoopbackMask     = $10;        {Loopback testing}

  {Modem status bit masks}
  DeltaCTSMask     = $01;        {CTS changed since last read}
  DeltaDSRMask     = $02;        {DSR changed since last read}
  DeltaRIMask      = $04;        {RI changed since last read}
  DeltaDCDMask     = $08;        {DCD changed since last read}
  CTSMask          = $10;        {Clear to send}
  DSRMask          = $20;        {Data set ready}
  RIMask           = $40;        {Ring indicator}
  DCDMask          = $80;        {Data carrier detect}

  {Interrupt enable bit masks}
  ReceiveIntMask   = $01;        {Interrupt on received data}
  TransmitIntMask  = $02;        {Interrupt on THR empty}
  LineIntMask      = $04;        {Interrupt on line status change}
  ModemIntMask     = $08;        {Interrupt on modem status change}

  {Hardware flow control options}
  hfUseDTR         = $01;   {Use DTR for receive flow control}
  hfUseRTS         = $02;   {Use RTS for receive flow control}
  hfRequireDSR     = $04;   {Require DSR before transmittting}
  hfRequireCTS     = $08;   {Require CTS before transmittting}
  hfDTRActiveLow   = $10;   {Make DTR active low}
  hfRTSActiveLow   = $20;   {Make RTS active low}
  hfDSRActiveLow   = $40;   {Make DSR active low}
  hfCTSActiveLow   = $80;   {Make CTS active low}

  sfReceiveFlow    = $01;   {Use receiver flow control}
  sfTransmitFlow   = $02;   {User transmitter flow control}
  DefSWFOpt        = sfReceiveFlow + sfTransmitFlow;

var
  {Array of active ports}
  ActiveComPort : array[1..MaxActivePort] of PortRecPtr;

  {$IFNDEF UseOOP}
  {Low-level procedure ptrs}
  InitPort         : InitPortProc;
  InitPortKeep     : InitPortKeepProc;
  DonePort         : DonePortProc;
  SetLine          : SetLineProc;
  GetLine          : GetLineProc;
  SetModem         : SetModemProc;
  GetModem         : GetModemProc;
  GetChar          : GetCharProc;
  PeekChar         : PeekCharProc;
  PutChar          : PutCharProc;
  StartTransmitter : StartTransmitterProc;
  CharReady        : CharReadyFunc;
  TransReady       : TransReadyFunc;
  SendBreak        : SendBreakProc;
  ActivatePort     : ActivatePortProc;
  DeactivatePort   : ActivatePortProc;
  SavePort         : SavePortProc;
  RestorePort      : SavePortProc;
  GotError         : GotErrorProc;

  {Procedure pointers needed by alternate device layers}
  UpdateLineStatus  : UpdateLineStatusFunc;
  UpdateModemStatus : UpdateModemStatusFunc;
  HWFlowSet         : FlowSetProc;
  HWFlowGet         : FlowGetFunc;
  SWFlowSet         : FlowSetProc;
  SWFlowGet         : FlowGetFunc;
  SWFlowCtl         : FlowCtlProc;
  BufferStatus      : BufferStatusProc;
  BufferFlush       : BufferFlushProc;

  {$ENDIF}
  SetUart          : SetUartProc;

  {Special procedure pointer for handling required ANSI responses}
  AnsiOutput       : PutCharProc;

{$IFDEF UsePModeDLL}

function IsPS2 : Boolean; Export;
function ComNameString(ComName : ComNameType) : String; Export;
function CheckForString(var Index : Byte; C : Char;
                        S : String; IgnoreCase : Boolean) : Boolean; Export;
procedure RotateIrqPriority(Irq : Byte); Export;
procedure SetPS2DetectMode(Mode : PS2Mode); Export;

{$IFDEF Tracing}
procedure ClearTracing; Export;
procedure AbortTracing; Export;
procedure InitTracing(NumEntries : Word); Export;
procedure AddTraceEntry(CurEntry : Char; CurCh : Char); Export;
procedure DumpTrace(FName : PathStr); Export;
procedure DumpTraceHex(FName : PathStr); Export;
procedure AppendTrace(FName : PathStr); Export;                 {!!.02}{!!.03}
procedure AppendTraceHex(FName : PathStr); Export;              {!!.02}{!!.03}
procedure StartTracing; Export;
procedure StopTracing; Export;
{$ENDIF}

function NoAbortFunc : Boolean; Export;
procedure NoErrorProc(P : Pointer; var StatusCode : Word); Export;

procedure GetProcPointers(var AInitPort          : InitPortProc;
                          var AInitPortKeep      : InitPortKeepProc;
                          var ADonePort          : DonePortProc;
                          var ASetLine           : SetLineProc;
                          var AGetLine           : GetLineProc;
                          var ASetModem          : SetModemProc;
                          var AGetModem          : GetModemProc;
                          var AGetChar           : GetCharProc;
                          var APeekChar          : PeekCharProc;
                          var APutChar           : PutCharProc;
                          var AStartTransmitter  : StartTransmitterProc;
                          var ACharReady         : CharReadyFunc;
                          var ATransReady        : TransReadyFunc;
                          var ASendBreak         : SendBreakProc;
                          var AActivatePort      : ActivatePortProc;
                          var ADeactivatePort    : ActivatePortProc;
                          var ASavePort          : SavePortProc;
                          var ARestorePort       : SavePortProc;
                          var AGotError          : GotErrorProc;
                          var AUpdateLineStatus  : UpdateLineStatusFunc;
                          var AUpdateModemStatus : UpdateModemStatusFunc;
                          var AHWFlowSet         : FlowSetProc;
                          var AHWFlowGet         : FlowGetFunc;
                          var ASWFlowSet         : FlowSetProc;
                          var ASWFlowGet         : FlowGetFunc;
                          var ASWFlowCtl         : FlowCtlProc;
                          var ABufferStatus      : BufferStatusProc;
                          var ABufferFlush       : BufferFlushProc;
                          var ASetUart           : SetUartProc;
                          var AAnsiOutput        : PutCharProc); Export;

{$ELSE}

function IsPS2 : Boolean;
function ComNameString(ComName : ComNameType) : String;
function CheckForString(var Index : Byte; C : Char;
                        S : String; IgnoreCase : Boolean) : Boolean;
procedure RotateIrqPriority(Irq : Byte);
procedure SetPS2DetectMode(Mode : PS2Mode);

{$IFDEF Tracing}
procedure ClearTracing;
procedure AbortTracing;
procedure InitTracing(NumEntries : Word);
procedure AddTraceEntry(CurEntry : Char; CurCh : Char);
procedure DumpTrace(FName : PathStr);
procedure DumpTraceHex(FName : PathStr);
procedure AppendTrace(FName : PathStr);                                {!!.02}
procedure AppendTraceHex(FName : PathStr);                             {!!.02}
procedure StartTracing;
procedure StopTracing;
{$ENDIF}

function NoAbortFunc : Boolean;
procedure NoErrorProc(P : Pointer; var StatusCode : Word);

procedure GetProcPointers(var AInitPort          : InitPortProc;
                          var AInitPortKeep      : InitPortKeepProc;
                          var ADonePort          : DonePortProc;
                          var ASetLine           : SetLineProc;
                          var AGetLine           : GetLineProc;
                          var ASetModem          : SetModemProc;
                          var AGetModem          : GetModemProc;
                          var AGetChar           : GetCharProc;
                          var APeekChar          : PeekCharProc;
                          var APutChar           : PutCharProc;
                          var AStartTransmitter  : StartTransmitterProc;
                          var ACharReady         : CharReadyFunc;
                          var ATransReady        : TransReadyFunc;
                          var ASendBreak         : SendBreakProc;
                          var AActivatePort      : ActivatePortProc;
                          var ADeactivatePort    : ActivatePortProc;
                          var ASavePort          : SavePortProc;
                          var ARestorePort       : SavePortProc;
                          var AGotError          : GotErrorProc;
                          var AUpdateLineStatus  : UpdateLineStatusFunc;
                          var AUpdateModemStatus : UpdateModemStatusFunc;
                          var AHWFlowSet         : FlowSetProc;
                          var AHWFlowGet         : FlowGetFunc;
                          var ASWFlowSet         : FlowSetProc;
                          var ASWFlowGet         : FlowGetFunc;
                          var ASWFlowCtl         : FlowCtlProc;
                          var ABufferStatus      : BufferStatusProc;
                          var ABufferFlush       : BufferFlushProc;
                          var ASetUart           : SetUartProc;
                          var AAnsiOutput        : PutCharProc);
{$ENDIF}

