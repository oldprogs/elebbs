(*
**
** Copyright (C) 1999-2003 Maarten Bekers. All rights reserved.
**
** This file is part of EleBBS, EleXer and EleWEB.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
*)
(*
**
** OUTPUT.SUP, Input/Output support routines for EleBBS
**
** Copyright (c) 1996 by Maarten Bekers
**
** Created : 31-Aug-1996
** Last update : 31-Aug-1996
**
**
** Note: Described in TurboPascal language-guide, page 146.
*)

(*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-*)
{$IFDEF WIN32} {$H-} {$ENDIF}

{$F+}
{$IFNDEF WINGUI}
Function WinWrite(Var F: TextRec): Integer;
{$ELSE}
Function WinWrite(Var F: TTextRec): Integer;
{$ENDIF}
var temp: String;
begin
  if F.BufPos > 0 then
    begin
      Move(F.Buffer[0], Temp[1], F.BufPos);
      Temp[0] := Chr(F.BufPos);
      OutputObj^.DisplayStr(Temp, LineCfg^.PauseChecking, []);
    end; { if }

(***********
  if F.BufPos > 00 then
   begin
     PChar(F.BufPtr)[F.BufPos] := #00;
     Temp[0] := Chr(F.BufPos);
     Move(F.BufPtr^, Temp[1], F.BufPos);
     InOut^.DisplayStr(Temp, PauseChecking);
   end; { if }
*************)

(****
  if Counter < F.BufPos then
   If F.BufPos > 00 then
    While Counter < F.BufPos do
        begin
          {$IFDEF WINGUI}
           If Counter <= StrLen(PChar(F.BufPtr)) then
             InOut^.DisplayChr(PChar(F.BufPtr)[Counter]);
          {$ELSE}
           InOut^.DisplayChr(F.BufPtr^[Counter]);
          {$ENDIF}
           Inc(Counter);
        end;
****)

  F.BufPos := 0;
  WinWrite := 0;
end; { func. WinWrite }

(*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-*)

{$F+}
{$IFNDEF WINGUI}
Function WinCrtClose(Var F: TextRec): Integer;
{$ELSE}
Function WinCrtClose(Var F: TTextRec): Integer;
{$ENDIF}
begin
  F.Mode := fmClosed;
  WinCrtClose := 0;
end; { func. WinCrtCLose }

(*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-*)

{$F+}
{$IFNDEF WINGUI}
Function WinCrtOpen(Var F: TextRec): Integer;
{$ELSE}
Function WinCrtOpen(Var F: TTextRec): Integer;
{$ENDIF}
begin
  If F.Mode = fmOutput Then
    WinCrtOpen := 0
  Else
    WinCrtOpen := 5;
end; { func. WinCrtOpen }

(*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-+-*-*)

Procedure AssignOutPut;
begin
 {$IFNDEF WINGUI}
   with TextRec(Output) do
 {$ELSE}
   with TTextRec(Output) do
 {$ENDIF}
  begin
    Handle := $FFFF;
    Mode := fmClosed;
    BufSize := sizeof(buffer);
    BufPtr := @Buffer;
    OpenFunc := @WinCrtOpen;
    InOutFunc := @WinWrite;
    FlushFunc := @WinWrite;
    CloseFunc := @WinCrtClose;
    Name[0] := #0;
  end; { Output }

  System.Rewrite(output);
end; { proc. AssignWinCrt }


